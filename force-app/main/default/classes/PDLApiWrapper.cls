//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class PDLApiWrapper {

	public class Industries {
		public String name {get;set;} 
		public Boolean is_primary {get;set;} 

		public Industries(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'is_primary') {
							is_primary = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Industries consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Company {
		public String name {get;set;} 
		public String size {get;set;} 
		public String id {get;set;} 
		public String founded {get;set;} 
		public String industry {get;set;} 
		public Location location {get;set;} 
		public List<String> profiles {get;set;} 
		public String website {get;set;} 

		public Company(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'size') {
							size = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'founded') {
							founded =  parser.getText();
						} else if (text == 'industry') {
							industry = parser.getText();
						} else if (text == 'location') {
							location = new Location(parser);
						} else if (text == 'profiles') {
							profiles = arrayOfString(parser);
						} else if (text == 'website') {
							website = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Company consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Locations_X {
		public String name {get;set;} 
		public String locality {get;set;} 
		public String region {get;set;} 
		public String subregion {get;set;} 
		public String country {get;set;} 
		public String continent {get;set;} 
		public String type_Z {get;set;} // in json: type
		public String geo {get;set;} 
		public String postal_code {get;set;} 
		public String zip_plus_4 {get;set;} 
		public String street_address {get;set;} 
		public String address_line_2 {get;set;} 

		public Locations_X(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'locality') {
							locality = parser.getText();
						} else if (text == 'region') {
							region = parser.getText();
						} else if (text == 'subregion') {
							subregion = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'continent') {
							continent = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'geo') {
							geo = parser.getText();
						} else if (text == 'postal_code') {
							postal_code = parser.getText();
						} else if (text == 'zip_plus_4') {
							zip_plus_4 = parser.getText();
						} else if (text == 'street_address') {
							street_address = parser.getText();
						} else if (text == 'address_line_2') {
							address_line_2 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Locations_X consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Locations_W {
		public String name {get;set;} 
		public String locality {get;set;} 
		public String region {get;set;} 
		public String subregion {get;set;} 
		public String country {get;set;} 
		public String continent {get;set;} 
		public String type_Z {get;set;} // in json: type
		public String geo {get;set;} 
		public String postal_code {get;set;} 
		public String zip_plus_4 {get;set;} 
		public String street_address {get;set;} 
		public String address_line_2 {get;set;} 

		public Locations_W(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'locality') {
							locality = parser.getText();
						} else if (text == 'region') {
							region = parser.getText();
						} else if (text == 'subregion') {
							subregion = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'continent') {
							continent = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'geo') {
							geo = parser.getText();
						} else if (text == 'postal_code') {
							postal_code = parser.getText();
						} else if (text == 'zip_plus_4') {
							zip_plus_4 = parser.getText();
						} else if (text == 'street_address') {
							street_address = parser.getText();
						} else if (text == 'address_line_2') {
							address_line_2 = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Locations_W consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Company_Z {
		public String name {get;set;} 
		public String size {get;set;} 
		public String id {get;set;} 
		public String founded {get;set;} 
		public String industry {get;set;} 
		public Location_Y location {get;set;} 
		public List<String> profiles {get;set;} 
		public String website {get;set;} 

		public Company_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'size') {
							size = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'founded') {
							founded = parser.getText();
						} else if (text == 'industry') {
							industry = parser.getText();
						} else if (text == 'location') {
							location = new Location_Y(parser);
						} else if (text == 'profiles') {
							profiles = arrayOfString(parser);
						} else if (text == 'website') {
							website = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Company_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Location_Z {
		public String name {get;set;} 
		public String locality {get;set;} 
		public String region {get;set;} 
		public String country {get;set;} 
		public String continent {get;set;} 
		public String street_address {get;set;} 
		public String postal_code {get;set;} 
		public String last_updated {get;set;} 

		public Location_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'locality') {
							locality = parser.getText();
						} else if (text == 'region') {
							region = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'continent') {
							continent = parser.getText();
						} else if (text == 'street_address') {
							street_address = parser.getText();
						} else if (text == 'postal_code') {
							postal_code = parser.getText();
						} else if (text == 'last_updated') {
							last_updated = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Location_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Metadata {
		public String user_id {get;set;} 
		public String name {get;set;} 

		public Metadata(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'user_id') {
							user_id = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Metadata consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Company_Y {
		public String name {get;set;} 
		public String size {get;set;} 
		public String id {get;set;} 
		public String founded {get;set;} 
		public String industry {get;set;} 
		public Location location {get;set;} 
		public List<String> profiles {get;set;} 
		public String website {get;set;} 

		public Company_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'size') {
							size = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'founded') {
							founded = parser.getText();
						} else if (text == 'industry') {
							industry = parser.getText();
						} else if (text == 'location') {
							location = new Location(parser);
						} else if (text == 'profiles') {
							profiles = arrayOfString(parser);
						} else if (text == 'website') {
							website = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Company_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Locations_Z {
		public String name {get;set;} 
		public String locality {get;set;} 
		public String region {get;set;} 
		public String subregion {get;set;} 
		public String country {get;set;} 
		public String continent {get;set;} 
		public String type_Z {get;set;} // in json: type
		public String geo {get;set;} 
		public String postal_code {get;set;} 
		public String zip_plus_4 {get;set;} 
		public String street_address {get;set;} 
		public String address_line_2 {get;set;} 
		public Boolean most_recent {get;set;} 
		public Boolean is_primary {get;set;} 
		public String last_updated {get;set;} 

		public Locations_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'locality') {
							locality = parser.getText();
						} else if (text == 'region') {
							region = parser.getText();
						} else if (text == 'subregion') {
							subregion = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'continent') {
							continent = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'geo') {
							geo = parser.getText();
						} else if (text == 'postal_code') {
							postal_code = parser.getText();
						} else if (text == 'zip_plus_4') {
							zip_plus_4 = parser.getText();
						} else if (text == 'street_address') {
							street_address = parser.getText();
						} else if (text == 'address_line_2') {
							address_line_2 = parser.getText();
						} else if (text == 'most_recent') {
							most_recent = parser.getBooleanValue();
						} else if (text == 'is_primary') {
							is_primary = parser.getBooleanValue();
						} else if (text == 'last_updated') {
							last_updated = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Locations_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Name {
		public String first_name {get;set;} 
		public String middle_name {get;set;} 
		public String last_name {get;set;} 
		public String clean {get;set;} 

		public Name(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'first_name') {
							first_name = parser.getText();
						} else if (text == 'middle_name') {
							middle_name = parser.getText();
						} else if (text == 'last_name') {
							last_name = parser.getText();
						} else if (text == 'clean') {
							clean = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Name consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Names {
		public String first_name {get;set;} 
		public String last_name {get;set;} 
		public String suffix {get;set;} 
		public String middle_name {get;set;} 
		public String middle_initial {get;set;} 
		public String name {get;set;} 
		public String clean {get;set;} 
		public Boolean is_primary {get;set;} 

		public Names(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'first_name') {
							first_name = parser.getText();
						} else if (text == 'last_name') {
							last_name = parser.getText();
						} else if (text == 'suffix') {
							suffix = parser.getText();
						} else if (text == 'middle_name') {
							middle_name = parser.getText();
						} else if (text == 'middle_initial') {
							middle_initial = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'clean') {
							clean = parser.getText();
						} else if (text == 'is_primary') {
							is_primary = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Names consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class School {
		public String name {get;set;} 
		public String type_Z {get;set;} // in json: type
		public String id {get;set;} 
		public String location {get;set;} 
		public List<String> profiles {get;set;} 
		public String website {get;set;} 

		public School(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'id') {
							id = parser.getText();
						} else if (text == 'location') {
							location = parser.getText();
						} else if (text == 'profiles') {
							profiles = arrayOfString(parser);
						} else if (text == 'website') {
							website = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'School consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Education {
		public School school {get;set;} 
		public String end_date {get;set;} 
		public String start_date {get;set;} 
		public String gpa {get;set;} 
		public List<String> degrees {get;set;} 
		public List<String> majors {get;set;} 
		public List<String> minors {get;set;} 
		public List<Locations_W> locations {get;set;} 

		public Education(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'school') {
							school = new School(parser);
						} else if (text == 'end_date') {
							end_date = parser.getText();
						} else if (text == 'start_date') {
							start_date = parser.getText();
						} else if (text == 'gpa') {
							gpa = parser.getText();
						} else if (text == 'degrees') {
							degrees = arrayOfString(parser);
						} else if (text == 'majors') {
							majors = arrayOfString(parser);
						} else if (text == 'minors') {
							minors = arrayOfString(parser);
						} else if (text == 'locations') {
							locations = arrayOfLocations_W(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Education consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Skills {
		public String name {get;set;} 

		public Skills(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Skills consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Primary {
		public Job job {get;set;} 
		public Location_Z location {get;set;} 
		public Name name {get;set;} 
		public String industry {get;set;} 
		public List<String> work_emails {get;set;} 
		public List<String> personal_emails {get;set;} 
		public List<String> other_emails {get;set;} 
		public String linkedin {get;set;} 

		public Primary(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'job') {
							job = new Job(parser);
						} else if (text == 'location') {
							location = new Location_Z(parser);
						} else if (text == 'name') {
							name = new Name(parser);
						} else if (text == 'industry') {
							industry = parser.getText();
						} else if (text == 'work_emails') {
							work_emails = arrayOfString(parser);
						} else if (text == 'personal_emails') {
							personal_emails = arrayOfString(parser);
						} else if (text == 'other_emails') {
							other_emails = arrayOfString(parser);
						} else if (text == 'linkedin') {
							linkedin = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Primary consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Profiles {
		public String network {get;set;} 
		public List<String> ids {get;set;} 
		public String clean {get;set;} 
		public List<String> aliases {get;set;} 
		public String username {get;set;} 
		public Boolean is_primary {get;set;} 
		public String url {get;set;} 

		public Profiles(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'network') {
							network = parser.getText();
						} else if (text == 'ids') {
							ids = arrayOfString(parser);
						} else if (text == 'clean') {
							clean = parser.getText();
						} else if (text == 'aliases') {
							aliases = arrayOfString(parser);
						} else if (text == 'username') {
							username = parser.getText();
						} else if (text == 'is_primary') {
							is_primary = parser.getBooleanValue();
						} else if (text == 'url') {
							url = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Profiles consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Location_Y {
		public String locality {get;set;} 
		public String region {get;set;} 
		public String country {get;set;} 
		public String street_address {get;set;} 

		public Location_Y(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'locality') {
							locality = parser.getText();
						} else if (text == 'region') {
							region = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'street_address') {
							street_address = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Location_Y consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Emails {
		public String address {get;set;} 
		public String type_Z {get;set;} // in json: type
		public String sha256 {get;set;} 
		public String domain {get;set;} 
		public String local {get;set;} 
        
		public Emails(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'address') {
							address = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'sha256') {
							sha256 = parser.getText();
						} else if (text == 'domain') {
							domain = parser.getText();
						} else if (text == 'local') {
							local = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Emails consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Job {
		public Company company {get;set;} 
		public List<Locations> locations {get;set;} 
		public String end_date {get;set;} 
		public String start_date {get;set;} 
		public Title title {get;set;} 
		public String last_updated {get;set;} 

		public Job(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'company') {
							company = new Company(parser);
						} else if (text == 'locations') {
							locations = arrayOfLocations(parser);
						} else if (text == 'end_date') {
							end_date = parser.getText();
						} else if (text == 'start_date') {
							start_date = parser.getText();
						} else if (text == 'title') {
							title = new Title(parser);
						} else if (text == 'last_updated') {
							last_updated = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Job consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Locations {
		public String name {get;set;} 
		public String locality {get;set;} 
		public String region {get;set;} 
		public String country {get;set;} 
		public String last_updated {get;set;} 

		public Locations(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'locality') {
							locality = parser.getText();
						} else if (text == 'region') {
							region = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'last_updated') {
							last_updated = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Locations consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Title {
		public List<String> functions {get;set;} 
		public String name {get;set;} 
		public List<String> levels {get;set;} 

		public Title(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'functions') {
							functions = arrayOfString(parser);
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'levels') {
							levels = arrayOfString(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Title consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Data {
		public String id {get;set;} 
		public Primary primary {get;set;} 
		public String birth_date {get;set;} 
		public String birth_date_fuzzy {get;set;} 
		public String gender {get;set;} 
		public List<Industries> industries {get;set;} 
		public List<Profiles> profiles {get;set;} 
		public List<Emails> emails {get;set;} 
		public List<Phone_numbers> phone_numbers {get;set;} 
		public List<Names> names {get;set;} 
		public List<Locations_Z> locations {get;set;} 
		public List<Experience> experience {get;set;} 
		public List<Education> education {get;set;} 
		public List<Skills> skills {get;set;} 
		public List<Interests> interests {get;set;} 

		public Data(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'id') {
							id = parser.getText();
						} else if (text == 'primary') {
							primary = new Primary(parser);
						} else if (text == 'birth_date') {
							birth_date = parser.getText();
						} else if (text == 'birth_date_fuzzy') {
							birth_date_fuzzy = parser.getText();
						} else if (text == 'gender') {
							gender = parser.getText();
						} else if (text == 'industries') {
							industries = arrayOfIndustries(parser);
						} else if (text == 'profiles') {
							profiles = arrayOfProfiles(parser);
						} else if (text == 'emails') {
							emails = arrayOfEmails(parser);
						} else if (text == 'phone_numbers') {
							phone_numbers = arrayOfPhone_numbers(parser);
						} else if (text == 'names') {
							names = arrayOfNames(parser);
						} else if (text == 'locations') {
							locations = arrayOfLocations_Z(parser);
						} else if (text == 'experience') {
							experience = arrayOfExperience(parser);
						} else if (text == 'education') {
							education = arrayOfEducation(parser);
						} else if (text == 'skills') {
							skills = arrayOfSkills(parser);
						} else if (text == 'interests') {
							interests = arrayOfInterests(parser);
						} else {
							System.debug(LoggingLevel.WARN, 'Data consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public Integer status {get;set;} 
	public Integer likelihood {get;set;} 
    public Error error {get; set;}
    public Data data {get;set;} 
    public String dataset_version {get;set;} 
	public Metadata metadata {get;set;} 

	public PDLApiWrapper(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'status') {
						status = parser.getIntegerValue();
					} else if (text == 'likelihood') {
						likelihood = parser.getIntegerValue();
					}else if (text == 'error') {
						error = new Error(parser);
					} else if (text == 'data') {
						data = new Data(parser);
					} else if (text == 'dataset_version') {
						dataset_version = parser.getText();
					} else if (text == 'metadata') {
						metadata = new Metadata(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'PDLApiWrapper consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Experience {
		public Company company {get;set;} 
		public List<Locations_X> locations {get;set;} 
		public String end_date {get;set;} 
		public String start_date {get;set;} 
		public Title title {get;set;} 
		public String type_Z {get;set;} // in json: type
		public Boolean is_primary {get;set;} 
		public Boolean most_recent {get;set;} 
		public String last_updated {get;set;} 

		public Experience(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'company') {
							company = new Company(parser);
						} else if (text == 'locations') {
							locations = arrayOfLocations_X(parser);
						} else if (text == 'end_date') {
							end_date = parser.getText();
						} else if (text == 'start_date') {
							start_date = parser.getText();
						} else if (text == 'title') {
							title = new Title(parser);
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'is_primary') {
							is_primary = parser.getBooleanValue();
						} else if (text == 'most_recent') {
							most_recent = parser.getBooleanValue();
						} else if (text == 'last_updated') {
							last_updated = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Experience consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	
	public class Phone_numbers {
		public String E164 {get;set;} 
		public String extension {get;set;} 
		public String type_Z {get;set;} // in json: type
		public String number_Z {get;set;} // in json: number
		public String country_code {get;set;} 
		public String national_number {get;set;} 
		public String area_code {get;set;} 
		public Boolean is_primary {get;set;} 

		public Phone_numbers(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'E164') {
							E164 = parser.getText();
						} else if (text == 'extension') {
							extension = parser.getText();
						} else if (text == 'type') {
							type_Z = parser.getText();
						} else if (text == 'number') {
							number_Z = parser.getText();
						} else if (text == 'country_code') {
							country_code = parser.getText();
						} else if (text == 'national_number') {
							national_number = parser.getText();
						} else if (text == 'area_code') {
							area_code = parser.getText();
						} else if (text == 'is_primary') {
							is_primary = parser.getBooleanValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Phone_numbers consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public class Location {
		public String locality {get;set;} 
		public String region {get;set;} 
		public String country {get;set;} 
		public String street_address {get;set;} 

		public Location(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'locality') {
							locality = parser.getText();
						} else if (text == 'region') {
							region = parser.getText();
						} else if (text == 'country') {
							country = parser.getText();
						} else if (text == 'street_address') {
							street_address = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Location consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static List<PDLApiWrapper> parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return arrayOfPDLApiWrapper(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
	

    private static List<Locations_Z> arrayOfLocations_Z(System.JSONParser p) {
        List<Locations_Z> res = new List<Locations_Z>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Locations_Z(p));
        }
        return res;
    }



    private static List<Experience> arrayOfExperience(System.JSONParser p) {
        List<Experience> res = new List<Experience>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Experience(p));
        }
        return res;
    }


 public class Error {
        public String type {get; set;}
        public String message {get; set;}
        
        public Error(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'type') {
                            type = parser.getText();
                        } else if (text == 'message') {
                            message = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Error consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }

       public class Interests {
        public String name {get; set;}
        
        public Interests(JSONParser parser) {
            while (parser.nextToken() != System.JSONToken.END_OBJECT) {
                if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
                    String text = parser.getText();
                    if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
                        if (text == 'name') {
                            name = parser.getText();
                        } else {
                            System.debug(LoggingLevel.WARN, 'Interests consuming unrecognized property: '+text);
                            consumeObject(parser);
                        }
                    }
                }
            }
        }
    }
    
/*

    private static List<Locations_Y> arrayOfLocations_Y(System.JSONParser p) {
        List<Locations_Y> res = new List<Locations_Y>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Locations_Y(p));
        }
        return res;
    }
*/










    private static List<Locations_W> arrayOfLocations_W(System.JSONParser p) {
        List<Locations_W> res = new List<Locations_W>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Locations_W(p));
        }
        return res;
    }


    private static List<Skills> arrayOfSkills(System.JSONParser p) {
        List<Skills> res = new List<Skills>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Skills(p));
        }
        return res;
    }



    private static List<Profiles> arrayOfProfiles(System.JSONParser p) {
        List<Profiles> res = new List<Profiles>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Profiles(p));
        }
        return res;
    }



    private static List<Industries> arrayOfIndustries(System.JSONParser p) {
        List<Industries> res = new List<Industries>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Industries(p));
        }
        return res;
    }



    private static List<Locations> arrayOfLocations(System.JSONParser p) {
        List<Locations> res = new List<Locations>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Locations(p));
        }
        return res;
    }



    private static List<Phone_numbers> arrayOfPhone_numbers(System.JSONParser p) {
        List<Phone_numbers> res = new List<Phone_numbers>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Phone_numbers(p));
        }
        return res;
    }






    private static List<Education> arrayOfEducation(System.JSONParser p) {
        List<Education> res = new List<Education>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Education(p));
        }
        return res;
    }


    private static List<PDLApiWrapper> arrayOfPDLApiWrapper(System.JSONParser p) {
        List<PDLApiWrapper> res = new List<PDLApiWrapper>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new PDLApiWrapper(p));
        }
        return res;
    }


    private static List<Emails> arrayOfEmails(System.JSONParser p) {
        List<Emails> res = new List<Emails>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Emails(p));
        }
        return res;
    }









    private static List<Names> arrayOfNames(System.JSONParser p) {
        List<Names> res = new List<Names>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Names(p));
        }
        return res;
    }







    private static List<String> arrayOfString(System.JSONParser p) {
        List<String> res = new List<String>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(p.getText());
        }
        return res;
    }





    private static List<Locations_X> arrayOfLocations_X(System.JSONParser p) {
        List<Locations_X> res = new List<Locations_X>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Locations_X(p));
        }
        return res;
    }


    
    
    private static List<Interests> arrayOfInterests(System.JSONParser p) {
        List<Interests> res = new List<Interests>();
        if (p.getCurrentToken() == null) p.nextToken();
        while (p.nextToken() != System.JSONToken.END_ARRAY) {
            res.add(new Interests(p));
        }
        return res;
    }
    
    



}